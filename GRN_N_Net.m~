% GRN_N_Net
% Creating n-gene multistate networks
% Author: Baihan Lin
% Date:   August 2016


clear all;
close all;

%% Initialization

rng(123);                 % randomizer

global pathN;
pathN = '/Users/DoerLBH/Dropbox/git/ISB_GRN/data/M-20160818/';
system(['mkdir ' pathN]);

num = 5;         % network number
n = 4;           % gene
trial = 50;      % trial
trshd = 1;       % threshold for different states
sstrshd = 1;     % threshold for equilibrium of steady states
tend = 3000;     % threshold for equilibrium vs. non-equlibrium
zthrs = 1;       % threshold for non-trivial states

Nstate = zeros(num,1);  % store how many states each network can have

% Starting values
Nr = 20;  % range of initial states
Pr = 200; % range of parameters
Pr = 100; % range of synthesis rate

x0 = zeros(trial,n);   % startvalues (genes)
x0 = Nr*rand(trial, n);

temp1 = zeros(n,1);
temp2 = zeros(n,1);

% Direct parameter declaration:
x = zeros(n,1);   % gene number
A = zeros(n,n);   % gene sythesis rate
M = zeros(n,1);   % gene degradation rate
P = zeros(n,n);   % parameters, i.e. gene-gene interaction (repress or activate)
N = zeros(n,n);   % interaction types

p = 1;           % num of generated networks (starting 1)

parfor count = 1:num
    
    Nss = zeros(n,1);      % store all the steady states
    ssc = 1;
    
    P = Pr*rand(n, n);
    M = rand(n,1);
    A = Ar*diag(P)/Pr;
    
    parfor node = 1:n
        N(node,:) = randsample(-1:1,n,true);
        N(node,node) = 0;
    end
    
    %     xr = zeros(trial,n,1);
    
    Nss = [];
    parfor t = 1:trial
        
        y0 = x0(1,:);
        [y,t,ph,ss] = netrun(P,N,A,M,ph,1,y0,tend);
        if ss == 1
            ssn = y(size(y,2)).';
            if ~prod((abs(ssn)<zthrs))
                Nss = vercat(Nss, ssn);
                
                fig = figure;
                plot(y.');
                title(strcat('X',num2str(count),'-N',num2str(n),'-T',num2str(t)));
                filename = strcat(pathN, 'X',num2str(count),'-N',num2str(n),'-T',num2str(t),'.png');
                parsaveas(gcf, filename,'png');
                close gcf;
            end
        end
        
    end
end
    
ssc = size(Nss,1);

fname = strcat('X',num2str(count),'-N',num2str(n),'-C',num2str(ssc));
save(strcat(pathN, fname, '-Nss.txt'), 'Nss', '-ascii');
save(strcat(pathN, fname, '-A.txt'), 'A', '-ascii');

     
               
    
    
    if (end == 0) {
        
        % plot gene time profiles
        #graphics.off()
        #windows(xpos=1,ypos=-50,width=n,height=4)
        
        Nss = cbind(Nss, xr[1,,length(xr)/(n*trial)]);
        for (i in 1:trial){
            for (j in 1:round(length(Nss)/node)) {
                if (mean(abs(xr[i,,length(xr)/(n*trial)] - Nss[,j]))>trshd) {
                    if (mean(abs(xr[i,,length(xr)/(n*trial)]))>zthrs) {
                        ssc = ssc + 1;
                        Nss = cbind(Nss, xr[i,,length(xr)/(n*trial)]);
                        }
                        }
                        }
                        }
                        
                        if (ssc == 1) {
                            p = p - 1;
                            } else {
                                maxY = max(xr)
                                #maxY = max( c(max(x1r),max(x2r),max(x3r)))
                                
                                png(filename = paste(Opath,"N", n, "-T", trial,"-P",p, ".png", sep=""),
                            width = 480, height = 480,
                            units = "px", pointsize = 12, bg = "white")
                            
                            plot(times,xr[1,1,],ylim=c(0, maxY), main=paste("N",n,"-T",trial,"-Trajectory",sep=""),
                            type="l",xlab="t",ylab="x",lwd=2,col=rgb(0,0,1/n))
                            #legend("topleft", lty=1:1)
                            
                            for (i in 1:trial){
                                for (node in 1:n) {
                                    lines(times,xr[i,node,],lwd=2,col=rgb(0,0,node/n));
                                    }
                                    }
                                    
                                    mtext(paste(n,"_gene_",ssc, "_state_network_#", p, sep=""))
                                    
                                    dev.off()
                                    
                                    sink(paste(Opath,"N",n,"-X",p,"-S",ssc,".txt",sep=""))
                                    
                                    cat(sprintf("Network %d with %d nodes has %d states:\n", p, n, ssc))
                                    cat("=============================\n")
                                    cat("Network parameters:\n")
                                    cat("\n P is \n")
                                    
                                    for(node in 1:n) {
                                        cat(P[node,]);
                                        }
                                        
                                        cat("\n M is \n")
                                        cat(M);
                                        
                                        cat("\n A is \n")
                                        cat(A);
                                        
                                        cat("\n N is \n")
                                        cat(N)
                                        
                                        cat("\n Network steady states: \n")
                                        
                                        for(j in 1:ssc) {
                                            cat(Nss[,j]);
                                            cat("\n")
                                            }
                                            
                                            cat("\n=============================\n")
                                            sink()
                                            
                                            % For better reading
                                            sink(paste(Opath,"N",n,"-X",p,"-Para.txt",sep=""))
                                            for(node in 1:n) {
                                                cat(P[node,]);
                                                cat("\n")
                                                }
                                                cat(M);
                                                cat("\n")
                                                cat(N)
                                                sink()
                                                
                                                sink(paste(Opath,"N",n,"-X",p,"-SS.txt",sep=""))
                                                for(j in 1:ssc) {
                                                    cat(Nss[,j]);
                                                    cat("\n")
                                                    }
                                                    sink()
                                                    
                                                    Nstate[p] = ssc;
                                                    }
                                                    
                                                    p = p + 1;
                                                    cat("round ", countcall, "\n");
                                                    countcall = countcall + 1;
                                                    }
                                                    }
                                                    
                                                    sink(paste(Opath,"SScount.txt",sep=""))
                                                    cat("ss = ", Nstate, "\n");
                                                    sink()
